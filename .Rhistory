geom_rect(data = rects, aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)))+
geom_point(data = obs, aes(x = x1, y = y1, colour = category))+
#scale_fill_brewer(palette = "Greens")+
theme_classic()
}
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x1","y1","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)))+
geom_point(data = obs, aes(x = x1, y = y1, colour = category))+
#scale_fill_brewer(palette = "Greens")+
theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x1","y1","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)))+
geom_point(data = obs, aes(x = x1, y = y1, colour = as.factorz(category)))+
#scale_fill_brewer(palette = "Greens")+
theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x1","y1","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)))+
geom_point(data = obs, aes(x = x1, y = y1, colour = as.factor(category)))+
#scale_fill_brewer(palette = "Greens")+
theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
as.data.frame(t22t1)
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)))
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)))+
geom_point(data = as.data.frame(obs22t1), aes(x = x, y = y, colour = category))
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2X))+
geom_point(data = as.data.frame(obs22t1), aes(x = x, y = y, colour = category))
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2))+
geom_point(data = as.data.frame(obs22t1), aes(x = x, y = y, colour = category))
ggplot()+
#geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)))+
geom_point(data = as.data.frame(obs22t1), aes(x = x, y = y, colour = category))
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)))
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)))
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)))+
geom_point(data = as.data.frame(obs22t1), aes(x = x, y = y, colour = category))
ggplot()+
geom_point(data = as.data.frame(obs22t1), aes(x = x, y = y, colour = category))+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)))
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)))+
geom_point(data = as.data.frame(obs22t1), aes(x = as.numeric(x), y = as.numeric(y), colour = category))
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)), alpha = .5)+
geom_point(data = as.data.frame(obs22t1), aes(x = as.numeric(x), y = as.numeric(y), colour = category))
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)), alpha = .5)+
geom_point(data = as.data.frame(obs22t1[,obs22t1["category"]=="positive",]), aes(x = as.numeric(x), y = as.numeric(y)))
obs22t1[,obs22t1["category"]=="positive",]
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)), alpha = .5)+
geom_point(data = as.data.frame(obs22t1[obs22t1[,"category"]=="positive"],), aes(x = as.numeric(x), y = as.numeric(y)))
as.data.frame(obs22t1[obs22t1[,"category"]=="positive"],)
obs22t1[obs22t1[,"category"]=="positive"]
obs22t1[obs22t1[,"category"]=="positive",]
ggplot()+
geom_rect(data = as.data.frame(t22t1),aes(xmin = x1,ymin = y1,xmax = x2, ymax = y2, fill = as.factor(alpha)), alpha = .5)+
geom_point(data = as.data.frame(obs22t1[obs22t1[,"category"]=="positive",]), aes(x = as.numeric(x), y = as.numeric(y)))
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)), alpha = .5)+
geom_point(data = obs[obs[,"category"]=="positive"], aes(x = as.numeric(x), y = as.numeric(y)), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative"], aes(x = as.numeric(x), y = as.numeric(y)), colour = "red")+
#scale_fill_brewer(palette = "Greens")+
theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)), alpha = .5)+
geom_point(data = obs[obs[,"category"]=="positive"], aes(x = as.numeric(x), y = as.numeric(y)), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative"], aes(x = as.numeric(x), y = as.numeric(y)), colour = "red")+
#scale_fill_brewer(palette = "Greens")+
theme_classic()
}
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)), alpha = .5)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "red")+
#scale_fill_brewer(palette = "Greens")+
theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)))+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "red")+
#scale_fill_brewer(palette = "Greens")+
theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions(obs = obs22t1,rects = t22t1)
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)))+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "red")+
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)))+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "red")
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = as.factor(alpha)), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "red")
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
rects$alpha = as.factor(alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "red")
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
rects$alpha = as.factor(rects$alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = as.numeric(x), y = as.numeric(y)), colour = "red")
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions = function(rects, obs){
rects = as.data.frame(rects)
rects$alpha = as.factor(rects$alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
obs$x = as.numeric(obs$x)
obs$y = as.numeric(obs$y)
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = x, y = y), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = x, y = y), colour = "red")
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions = function(rects, obs, trueRect){
rects = as.data.frame(rects)
rects$alpha = as.factor(rects$alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
obs$x = as.numeric(obs$x)
obs$y = as.numeric(obs$y)
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = x, y = y), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = x, y = y), colour = "red")+
geom_rect(data = trueRect, aes(xmin = x1, ymin = y1, xmax = x2, ymax = y2))
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1)
plotAlphaPredictions(obs = obs11t1,rects = t11t1, smallRect)
plotAlphaPredictions = function(rects, obs, trueRect){
rects = as.data.frame(rects)
rects$alpha = as.factor(rects$alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
obs$x = as.numeric(obs$x)
obs$y = as.numeric(obs$y)
trueRect = as.data.frame(trueRect)
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = x, y = y), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = x, y = y), colour = "red")+
geom_rect(data = trueRect, aes(xmin = x1, ymin = y1, xmax = x2, ymax = y2))
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1, smallRect)
trueRect
smallRect
plotAlphaPredictions = function(rects, obs, trueRect){
rects = as.data.frame(rects)
rects$alpha = as.factor(rects$alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
obs$x = as.numeric(obs$x)
obs$y = as.numeric(obs$y)
trueRect = as.data.frame(trueRect)
colnames(trueRect) = c("x1", "y1", "x2", "y2")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = x, y = y), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = x, y = y), colour = "red")+
geom_rect(data = trueRect, aes(xmin = x1, ymin = y1, xmax = x2, ymax = y2))
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1, smallRect)
smallRect
plotAlphaPredictions = function(rects, obs, trueRect){
rects = as.data.frame(rects)
rects$alpha = as.factor(rects$alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
obs$x = as.numeric(obs$x)
obs$y = as.numeric(obs$y)
trueRect = as.data.frame(trueRect)
names(trueRect) = c("x1", "y1", "x2", "y2")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = x, y = y), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = x, y = y), colour = "red")+
geom_rect(data = trueRect, aes(xmin = x1, ymin = y1, xmax = x2, ymax = y2))
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1, smallRect)
lwngth(smallRect)
length(smallRect)
as.data.frame(smallRect)
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = x, y = y), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = x, y = y), colour = "red")+
geom_rect(aes(xmin = trueRect[1], ymin = trueRect[2], xmax = trueRect[3], ymax = trueRect[4]))
plotAlphaPredictions = function(rects, obs, trueRect){
rects = as.data.frame(rects)
rects$alpha = as.factor(rects$alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
obs$x = as.numeric(obs$x)
obs$y = as.numeric(obs$y)
#trueRect = as.data.frame(trueRect)
colnames(trueRect) = c("x1", "y1", "x2", "y2")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = x, y = y), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = x, y = y), colour = "red")+
geom_rect(aes(xmin = trueRect[1], ymin = trueRect[2], xmax = trueRect[3], ymax = trueRect[4]))
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1, smallRect)
plotAlphaPredictions = function(rects, obs, trueRect){
rects = as.data.frame(rects)
rects$alpha = as.factor(rects$alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
obs$x = as.numeric(obs$x)
obs$y = as.numeric(obs$y)
#trueRect = as.data.frame(trueRect)
#colnames(trueRect) = c("x1", "y1", "x2", "y2")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = x, y = y), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = x, y = y), colour = "red")+
geom_rect(aes(xmin = trueRect[1], ymin = trueRect[2], xmax = trueRect[3], ymax = trueRect[4]))
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1, smallRect)
plotAlphaPredictions = function(rects, obs, trueRect){
rects = as.data.frame(rects)
rects$alpha = as.factor(rects$alpha)
obs = as.data.frame(obs)
colnames(obs) = c("x","y","category")
obs$x = as.numeric(obs$x)
obs$y = as.numeric(obs$y)
#trueRect = as.data.frame(trueRect)
#colnames(trueRect) = c("x1", "y1", "x2", "y2")
ggplot(data = rects)+
geom_rect(aes(xmin = rects[,1],ymin = rects[,2],xmax = rects[,3], ymax = rects[,4], fill = alpha), alpha = .8)+
geom_point(data = obs[obs[,"category"]=="positive",], aes(x = x, y = y), colour = "black")+
geom_point(data = obs[obs[,"category"]=="negative",], aes(x = x, y = y), colour = "red")+
geom_rect(aes(xmin = trueRect[1], ymin = trueRect[2], xmax = trueRect[3], ymax = trueRect[4]), alpha = 0, colour = "black")
#scale_fill_brewer(palette = "Greens")+
#theme_classic()
}
plotAlphaPredictions(obs = obs11t1,rects = t11t1, smallRect)
allPoints = expand.grid(seq(0.5,9.5,1), seq(0.5,9.5,1))
View(allPoints)
isInRectangle(p = allPoints, r = smallRect)
test = isInRectangle(p = allPoints, r = smallRect)
test1 = rowSums(test)
test1
obsPos = sample(evidence[evidence[,"isPositive"] == TRUE], nPos)
evidence = cbind(allPoints, isPositive)
allPoints = expand.grid(seq(0.5,9.5,1), seq(0.5,9.5,1))
isPositive = isInRectangle(p = allPoints, r = smallRect)
evidence = cbind(allPoints, isPositive)
obsPos = sample(evidence[evidence[,"isPositive"] == TRUE], nPos)
obsPos = sample(evidence[evidence[,"isPositive"] == TRUE,], nPos)
evidence[evidence[,"isPositive"] == TRUE,]
evidence[evidence[,"isPositive"]
,]
evidence[,"isPositive"]
evidence
colnames(evidence) = c("x","y","isPositive")
obsPos = sample(evidence[evidence[,"isPositive"] == TRUE,], nPos)
nPos = 2
obsPos = sample(evidence[evidence[,"isPositive"] == TRUE,], nPos)
obsPos
obsPos = sample(1:length(pos), nPos)
pos = 4
obsPos = sample(1:length(pos), nPos)
pos = 1:5
obsPos = sample(1:length(pos), nPos)
obsPos
samplePos = sample(1:length(pos), nPos)
obsPos = pos[samplePos,]
pos
pos = evidence[evidence[,"isPositive"] == TRUE,]
pos
samplePos = sample(1:length(pos[,1]), nPos)
sampleNeg = sample(1:leng(neg[,1]), nNeg)
obsPos = pos[samplePos,]
obsPos
obs = rbind(obsPos, obsNeg)
obs
obsNeg = pos[samplePNeg,]
obsNeg = pos[sampleNeg,]
sampleNeg = sample(1:length(neg[,1]), nNeg)
neg = evidence[evidence[,"isPositive"] == FALSE,]
samplePos = sample(1:length(pos[,1]), nPos)
sampleNeg = sample(1:length(neg[,1]), nNeg)
nNeg - 2
nNeg = 2
neg = evidence[evidence[,"isPositive"] == FALSE,]
sampleNeg = sample(1:length(neg[,1]), nNeg)
obsNeg = pos[sampleNeg,]
obs = rbind(obsPos, obsNeg)
obs
neg = evidence[evidence[,"isNegative"] == FALSE,]
neg = evidence[evidence[,"isPositive"] == FALSE,]
neg
sampleNeg = sample(1:length(neg[,1]), nNeg)
sampleNeg
obsNeg = pos[sampleNeg,]
obsNeg
obsNeg = neg[sampleNeg,]
obs = rbind(obsPos, obsNeg)
obs
obs[,"isPositive" == TRUE] = "positive"
obs[,"isPositive" == FALSE] = "negative"
obs
obs[obs[,"isPositive" == TRUE],] = "positive"
obs
obs[,"isPositive" = vec[match(obs[,"category"], names(vec))]]
obs[,"isPositive"] = vec[match(obs[,"category"], names(vec))]
vec = c(TRUE = "positive", FALSE = "negative")
obs[,"isPositive"] = vec[match(obs[,"category"], names(vec))]
obs[obs[,"isPositive"] == TRUE] = "positive"
obs
obs = rbind(obsPos, obsNeg)
obs[obs[,"isPositive"] == TRUE] = "positive"
obs
categoryPos = rep("positive", length(nPos))
categoryNeg = rep("negative", lwngth(nNeg))
categoryNeg = rep("negative", length(nNeg))
category = rbind(categoryPos, categoryNeg)
categoryPos = rep("positive", length(nPos))
categoryNeg = rep("negative", length(nNeg))
category = rbind(categoryPos, categoryNeg)
category
rep("f",4)
categoryPos = rep("positive", length(nPos))
categoryPos
categoryPos = rep("positive", nPos)
categoryNeg = rep("negative", nNeg)
category = rbind(categoryPos, categoryNeg)
categoryNeg = rep("negative", nNeg)
category
category
categoryPos = rep("positive", nPos)
categoryPos = rep("positive", nPos)
categoryPos = rep("positive", nPos)
categoryNeg = rep("negative", nNeg)
category = c(categoryPos, categoryNeg)
category
obs = rbind(obsPos[,1:2], obsNeg[,1:2])
obs
obs = cbind(obs,category)
obs
samplePosNeg = function(nPos, nNeg, trueRect) {
allPoints = expand.grid(seq(0.5,9.5,1), seq(0.5,9.5,1)) # set up a matrixx of all possibele points. Using intervals of .5 so points are inside the rectangles not on the borders.
isPositive = isInRectangle(p = allPoints, r = trueRect) # check which of the points are inside the true rectangle and which aren't.
evidence = cbind(allPoints, isPositive) # combine into a single matrix
colnames(evidence) = c("x","y","isPositive") # assign column names
pos = evidence[evidence[,"isPositive"] == TRUE,]
neg = evidence[evidence[,"isPositive"] == FALSE,]
samplePos = sample(1:length(pos[,1]), nPos)
sampleNeg = sample(1:length(neg[,1]), nNeg)
obsPos = pos[samplePos,]
obsNeg = neg[sampleNeg,]
# other functions need the label to be under a column labeled "category" with cells as either "postitive or "negative"
categoryPos = rep("positive", nPos)
categoryNeg = rep("negative", nNeg)
category = c(categoryPos, categoryNeg)
obs = rbind(obsPos[,1:2], obsNeg[,1:2])
obs = cbind(obs,category)
return(obs)
}
samplePosNeg = function(nPos, nNeg, trueRect) {
allPoints = expand.grid(seq(0.5, 9.5, 1), seq(0.5, 9.5, 1)) # set up a matrixx of all possibele points. Using intervals of .5 so points are inside the rectangles not on the borders.
isPositive = isInRectangle(p = allPoints, r = trueRect) # check which of the points are inside the true rectangle and which aren't.
evidence = cbind(allPoints, isPositive) # combine into a single matrix
colnames(evidence) = c("x", "y", "isPositive") # assign column names
# make a seperate data set for positive and negative evidene respectively
pos = evidence[evidence[, "isPositive"] == TRUE, ]
neg = evidence[evidence[, "isPositive"] == FALSE, ]
# sample from positive and negative evidence respectively
samplePos = sample(1:length(pos[, 1]), nPos) # sample a row number from positive/negative matrix respectively
sampleNeg = sample(1:length(neg[, 1]), nNeg)
obsPos = pos[samplePos, ] # extract rows that have been sampled
obsNeg = neg[sampleNeg, ]
# other functions in this project need the observations label to be under a column labeled "category" with cells as either "postitive or "negative"
categoryPos = rep("positive", nPos)
categoryNeg = rep("negative", nNeg)
category = c(categoryPos, categoryNeg)
# combine coordinates and labels into a single matrix
obs = rbind(obsPos[, 1:2], obsNeg[, 1:2])
obs = cbind(obs, category)
#return
return(obs)
}
samplePosNeg(2,2,smallRect)
samplePosNeg(2,2,largeRect)
amplePosNeg(4,2,largeRect)
samplePosNeg(4,2,largeRect)
samplePosNeg(4,2,smallRect)
obs = samplePosNeg(4,2,smallRect)
alphaGridSearch(borders = borders, observations = obs )
alphaGridSearch(borders = borders, observations = obs)
alphaGridSearch(borders = borders, observations = obs)
plotAlphaPredictions(rects = t22t1)
largeRect = c(2,2,8,8)
obs = samplePosNeg(4,2,smallRect)
test1 = alphaGridSearch(borders = borders, observations = obs)
plotAlphaPredictions(rects = test1, obs = obs)
plotAlphaPredictions(rects = test1, obs = obs, largeRect)
borders = makeBorders(0:10)
obs = samplePosNeg(4,2,smallRect)
test1 = alphaGridSearch(borders = borders, observations = obs)
plotAlphaPredictions(rects = test1, obs = obs, largeRect)
obs = samplePosNeg(4,2,largeRect)
test1 = alphaGridSearch(borders = borders, observations = obs)
plotAlphaPredictions(rects = test1, obs = obs, largeRect)
obs2 = samplePosNeg(1,1,largeRect)
test1 = alphaGridSearch(borders = borders, observations = obs2)
plotAlphaPredictions(rects = test1, obs = obs2, largeRect)
