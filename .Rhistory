bestAlpha = fit[fit[,"allOverlap"] == max(fit[,"allOverlap"]),]
return(bestAlpha)
}
simulate_MultiTrials = function (observations, alpha = "default (1)") {
obs = observations
nObsConds = as.numeric(unique(obs[, "nObsCond"])) # unique trials (different "number of observations" condition)
# make sure the default alpha is a vector the size of nObsConds
if (alpha == "default (1)") {
alpha = rep(1, length(nObsConds))
}
responses = NULL
# for each trial, generate a rectangle that someone would have produced with a given alpha
for (i in nObsConds) {
alphaTrial = alpha[i]
partRect = simulatePar(obs[obs[, "nObsCond"] == i, ], borders, alpha = alphaTrial)
trial = cbind(partRect, i)
responses = rbind(responses, trial)
}
names(responses) =  c("x1", "y1", "x2", "y2", "nObsCond")
return(responses)
}
partTrust = simulate_MultiTrials(obs, alpha = 1)
View(partTrust)
partDecept = simulate_MultiTrials(obs, alpha = -1)
View(partDecept)
View(PartTrust)
View(partTrust)
View(partDecept)
simulate_MultiTrials = function (observations, alpha = "default (1)") {
obs = observations
nObsConds = as.numeric(unique(obs[, "nObsCond"])) # unique trials (different "number of observations" condition)
# make sure the default alpha is a vector the size of nObsConds
if (alpha == "default (1)") {
alpha = rep(1, length(nObsConds))
} else if (length(alpha) == 1) {
alpha = rep(alpha, length(nObsConds))
}
responses = NULL
# for each trial, generate a rectangle that someone would have produced with a given alpha
for (i in nObsConds) {
alphaTrial = alpha[i]
partRect = simulatePar(obs[obs[, "nObsCond"] == i, ], borders, alpha = alphaTrial)
trial = cbind(partRect, i)
responses = rbind(responses, trial)
}
names(responses) =  c("x1", "y1", "x2", "y2", "nObsCond")
return(responses)
}
partTrust = simulate_MultiTrials(obs, alpha = 1)
partDecept = simulate_MultiTrials(obs, alpha = -1)
View(partTrust)
partDecept = simulate_MultiTrials(obs, alpha = -1)
partWeak =  simulate_MultiTrials(obs, alpha = 0)
partTrust
View(partTrust)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
View(obs)
ggplot(data = partTrust)+
geom_point(data = obs, aes(x,y))+
facet_grid(~ nObsCond)
ggplot(data = as.data.frame(partTrust))+
geom_point(data = obs, aes(x,y))+
facet_grid(~ nObsCond)
ggplot(data = as.data.frame(partTrust))+
geom_point(data = as.data.frame(obs), aes(x,y))+
facet_grid(~ nObsCond)
?geom_rect
ggplot(data = as.data.frame(partTrust))+
geom_point(data = as.data.frame(obs), aes(x,y))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2))+
facet_grid(~ nObsCond)
ggplot(data = as.data.frame(as.numeric(partTrust)))+
geom_point(data = as.data.frame(as.numeric(obs)), aes(x,y))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2))+
facet_grid(~ nObsCond)
ggplot(data = as.numeric(as.data.frame(partTrust)))+
geom_point(data = as.numeric(as.data.frame(obs))), aes(x,y))+
par(mfrow = c(3,3))
ggplot(data = as.numeric(as.data.frame(partTrust)))+
geom_point(data = as.numeric(as.data.frame(obs)), aes(x,y))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2))+
facet_grid(~ nObsCond)
ggplot(data = (as.data.frame(partTrust)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2))+
facet_grid(~ nObsCond)
ggplot(data = (as.data.frame(partTrust)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),alpha = 0)+
facet_grid(~ nObsCond)
ggplot(data = (as.data.frame(partTrust)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = black, alpha = 0)+
facet_grid(~ nObsCond)
ggplot(data = (as.data.frame(partTrust)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(~ nObsCond)
ggplot(data = (as.data.frame(partDecept)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(~ nObsCond)
ggplot(data = (as.data.frame(partWeak)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(~ nObsCond)
par(mfrow = c(3,3))
# plot
par(mfrow = c(3,3))
ggplot(data = (as.data.frame(partTrust)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(~ nObsCond)
ggplot(data = (as.data.frame(partDecept)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(~ nObsCond)
ggplot(data = (as.data.frame(partWeak)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(~ nObsCond)
View(partDecept)
partTrust = cbind(simulate_MultiTrials(obs, alpha = 1), alpha = 1)
partDecept = cbind(simulate_MultiTrials(obs, alpha = -1), alpha = -1)
partWeak =  cbind(simulate_MultiTrials(obs, alpha = 0), alpha = 0)
View(partTrust)
# plot
d_plot = rbind(partTrust, partWeak, partDecept)
ggplot(data = (as.data.frame(d_plot)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(alpha ~ nObsCond)
grid = alphaGridSearch(borders, obs)
learn = pedLearner(borders,obs)
gridDist = alphaGridSearchDist(borders,obs)
source("~/Documents/Projects/RectangleWorld-sims/functions/alphaGridDist.R")
gridDist = alphaGridSearchDist(borders,obs)
colnames(learn)
rect = c(2,2,4,4)
match = gridDist[gridDist[,1] == 2 & gridDist[,2] == 2 & gridDist[,3] == 4 & gridDist[,4] == 4,]
a06 = gridDist[gridDist[,"alpha"] == "0.6",]
a0 = gridDist[gridDist[,"alpha"] == "0",]
a1 = gridDist[gridDist[,"alpha"] == "1",]
plot(1:length(a1[,1]), sort(a1[,"posterior"]), "l")
lines(1:length(a0[,1]), sort(a0[,"posterior"]), "l")
lines(1:length(a06[,1]), sort(a06[,"posterior"]), "l", col = "green")
a02 = gridDist[gridDist[,"alpha"] == "0.2",]
lines(1:length(a02[,1]), sort(a02[,"posterior"]), "l", col = "red")
obs1[,1]
obs
obsTest = save(obs, file = "obsTest.Rdata")
a0Neg1 = gridDist[gridDist[,"alpha"] == "-1",]
t
a0Neg1 = gridDist[gridDist[,"alpha"] == "-1",]
aNeg1 = gridDist[gridDist[,"alpha"] == "-1",]
lines(1:length(aNeg1[,1]), sort(aNeg1[,"posterior"]), "l", col = "red")
lines(1:length(a02[,1]), sort(a02[,"posterior"]), "l", col = "red")
lines(1:length(aNeg1[,1]), sort(aNeg1[,"posterior"]), "l", col = "blue")
View(generateObs)
# generate observations
debugonce(generateObs)
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
generateObs = function(nPos, nNeg, trueRects) {
allObs = NULL
if (is.vector(trueRects)){
trueRects = (as.data.frame(t(trueRects)) )
}
# for each true rectangle
for (i in 1:ifelse(is.vector(trueRects), 1,length(trueRects[, 1]))) {
nPosSoFar = 0 # calculates the number of pos/neg observations that have already been sampled, because each iteration builds on the last
nNegSoFar = 0
for (j in 1:length(nPos)) {
nPosLoop = nPos[j]
nNegLoop = nNeg[j]
trueRect = c(trueRects[i,])
obsTrial = samplePosNeg(
nPos = nPosLoop - nPosSoFar,
nNeg = nNegLoop - nNegSoFar,
trueRect = trueRect
)
nPosSoFar = nPosLoop
nNegSoFar = nNegLoop
rownames(obsTrial) = NULL
#triangle = rep(i, nPosLoop + nNegLoop)
nObsCond = j
obsTrial = cbind(obsTrial, nObsCond,trueRect)
allObs = rbind(allObs, obsTrial)
}
}
return(as.matrix(allObs))
}
View(trueRect)
generateObs = function(nPos, nNeg, trueRects) {
allObs = NULL
if (is.vector(trueRects)){
trueRects = (as.data.frame(t(trueRects)) )
}
# for each true rectangle
for (i in 1:ifelse(is.vector(trueRects), 1,length(trueRects[, 1]))) {
nPosSoFar = 0 # calculates the number of pos/neg observations that have already been sampled, because each iteration builds on the last
nNegSoFar = 0
for (j in 1:length(nPos)) {
nPosLoop = nPos[j]
nNegLoop = nNeg[j]
trueRect = c(trueRects[i,])
obsTrial = samplePosNeg(
nPos = nPosLoop - nPosSoFar,
nNeg = nNegLoop - nNegSoFar,
trueRect = trueRect
)
nPosSoFar = nPosLoop
nNegSoFar = nNegLoop
rownames(obsTrial) = NULL
#triangle = rep(i, nPosLoop + nNegLoop)
nObsCond = j
obsTrial = cbind(obsTrial, nObsCond,trueRect)
obsTrial = cbind(allObs, obsTrial)
obsTrial[,"nObsCond"] = j
allObs = rbind(allObs, obsTrial)
}
}
return(as.matrix(allObs))
}
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
# generate observations
debugonce(generateObs)
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
generateObs = function(nPos, nNeg, trueRects) {
allObs = NULL
if (is.vector(trueRects)){
trueRects = (as.data.frame(t(trueRects)) )
}
# for each true rectangle
for (i in 1:ifelse(is.vector(trueRects), 1,length(trueRects[, 1]))) {
nPosSoFar = 0 # calculates the number of pos/neg observations that have already been sampled, because each iteration builds on the last
nNegSoFar = 0
for (j in 1:length(nPos)) {
nPosLoop = nPos[j]
nNegLoop = nNeg[j]
trueRect = c(trueRects[i,])
obsTrial = samplePosNeg(
nPos = nPosLoop - nPosSoFar,
nNeg = nNegLoop - nNegSoFar,
trueRect = trueRect
)
nPosSoFar = nPosLoop
nNegSoFar = nNegLoop
rownames(obsTrial) = NULL
#triangle = rep(i, nPosLoop + nNegLoop)
nObsCond = j
obsTrial = cbind(obsTrial, nObsCond,trueRect)
obsTrial = rbind(allObs, obsTrial)
obsTrial[,"nObsCond"] = j
allObs = rbind(allObs, obsTrial)
}
}
return(as.matrix(allObs))
}
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
View(obs)
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
# generate observations
debugonce(generateObs)
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
is.numeric(i)
i
generateObs = function(nPos, nNeg, trueRects) {
allObs = NULL
if (is.vector(trueRects)){
trueRects = (as.data.frame(t(trueRects)) )
}
# for each true rectangle
for (i in 1:ifelse(is.vector(trueRects), 1,length(trueRects[, 1]))) {
nPosSoFar = 0 # calculates the number of pos/neg observations that have already been sampled, because each iteration builds on the last
nNegSoFar = 0
for (j in 1:length(nPos)) {
nPosLoop = nPos[j]
nNegLoop = nNeg[j]
trueRect = ifelse(is.vector(trueRects),trueRect = trueRects, trueRect = c(trueRects[i,]))
obsTrial = samplePosNeg(
nPos = nPosLoop - nPosSoFar,
nNeg = nNegLoop - nNegSoFar,
trueRect = trueRect
)
nPosSoFar = nPosLoop
nNegSoFar = nNegLoop
rownames(obsTrial) = NULL
#triangle = rep(i, nPosLoop + nNegLoop)
nObsCond = j
obsTrial = cbind(obsTrial, nObsCond,trueRect)
obsTrial = rbind(allObs, obsTrial)
obsTrial[,"nObsCond"] = j
allObs = rbind(allObs, obsTrial)
}
}
return(as.matrix(allObs))
}
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
# generate observations
debugonce(generateObs)
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
class(rect1)
class(rect1)is.vector(rect1)
is.vector(rect1)
generateObs = function(nPos, nNeg, trueRects) {
allObs = NULL
if (is.vector(trueRects)){
trueRects = (as.data.frame(t(trueRects)) )
}
# for each true rectangle
for (i in 1:ifelse(is.vector(trueRects), 1,length(trueRects[, 1]))) {
nPosSoFar = 0 # calculates the number of pos/neg observations that have already been sampled, because each iteration builds on the last
nNegSoFar = 0
for (j in 1:length(nPos)) {
nPosLoop = nPos[j]
nNegLoop = nNeg[j]
trueRect = ifelse(is.vector(trueRects),trueRects, c(trueRects[i,]))
obsTrial = samplePosNeg(
nPos = nPosLoop - nPosSoFar,
nNeg = nNegLoop - nNegSoFar,
trueRect = trueRect
)
nPosSoFar = nPosLoop
nNegSoFar = nNegLoop
rownames(obsTrial) = NULL
#triangle = rep(i, nPosLoop + nNegLoop)
nObsCond = j
obsTrial = cbind(obsTrial, nObsCond,trueRect)
obsTrial = rbind(allObs, obsTrial)
obsTrial[,"nObsCond"] = j
allObs = rbind(allObs, obsTrial)
}
}
return(as.matrix(allObs))
}
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
View(obs)
# generate observations
debugonce(generateObs)
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
View(trueRect)
debugonce(generateObs)
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
View(trueRects)
trueRects[,1]
trueRects[1,]
generateObs = function(nPos, nNeg, trueRects) {
allObs = NULL
if (is.vector(trueRects)){
trueRects = (as.data.frame(t(trueRects)) )
}
# for each true rectangle
for (i in 1:ifelse(is.vector(trueRects), 1,length(trueRects[, 1]))) {
nPosSoFar = 0 # calculates the number of pos/neg observations that have already been sampled, because each iteration builds on the last
nNegSoFar = 0
for (j in 1:length(nPos)) {
nPosLoop = nPos[j]
nNegLoop = nNeg[j]
#trueRect = ifelse(is.vector(trueRects),trueRects, c(trueRects[i,]))
trueRects = trueRects[1,]
obsTrial = samplePosNeg(
nPos = nPosLoop - nPosSoFar,
nNeg = nNegLoop - nNegSoFar,
trueRect = trueRect
)
nPosSoFar = nPosLoop
nNegSoFar = nNegLoop
rownames(obsTrial) = NULL
#triangle = rep(i, nPosLoop + nNegLoop)
nObsCond = j
obsTrial = cbind(obsTrial, nObsCond,trueRect)
obsTrial = rbind(allObs, obsTrial)
obsTrial[,"nObsCond"] = j
allObs = rbind(allObs, obsTrial)
}
}
return(as.matrix(allObs))
}
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
generateObs = function(nPos, nNeg, trueRects) {
allObs = NULL
if (is.vector(trueRects)){
trueRects = (as.data.frame(t(trueRects)) )
}
# for each true rectangle
for (i in 1:ifelse(is.vector(trueRects), 1,length(trueRects[, 1]))) {
nPosSoFar = 0 # calculates the number of pos/neg observations that have already been sampled, because each iteration builds on the last
nNegSoFar = 0
for (j in 1:length(nPos)) {
nPosLoop = nPos[j]
nNegLoop = nNeg[j]
#trueRect = ifelse(is.vector(trueRects),trueRects, c(trueRects[i,]))
trueRect = trueRects[1,]
obsTrial = samplePosNeg(
nPos = nPosLoop - nPosSoFar,
nNeg = nNegLoop - nNegSoFar,
trueRect = trueRect
)
nPosSoFar = nPosLoop
nNegSoFar = nNegLoop
rownames(obsTrial) = NULL
#triangle = rep(i, nPosLoop + nNegLoop)
nObsCond = j
obsTrial = cbind(obsTrial, nObsCond,trueRect)
obsTrial = rbind(allObs, obsTrial)
obsTrial[,"nObsCond"] = j
allObs = rbind(allObs, obsTrial)
}
}
return(as.matrix(allObs))
}
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
View(obs)
generateObs = function(nPos, nNeg, trueRects) {
allObs = NULL
if (is.vector(trueRects)){
trueRects = (as.data.frame(t(trueRects)) )
}
# for each true rectangle
for (i in 1:ifelse(is.vector(trueRects), 1,length(trueRects[, 1]))) {
nPosSoFar = 0 # calculates the number of pos/neg observations that have already been sampled, because each iteration builds on the last
nNegSoFar = 0
for (j in 1:length(nPos)) {
nPosLoop = nPos[j]
nNegLoop = nNeg[j]
#trueRect = ifelse(is.vector(trueRects),trueRects, c(trueRects[i,]))
trueRect = trueRects[1,]
obsTrial = samplePosNeg(
nPos = nPosLoop - nPosSoFar,
nNeg = nNegLoop - nNegSoFar,
trueRect = trueRect
)
nPosSoFar = nPosLoop
nNegSoFar = nNegLoop
rownames(obsTrial) = NULL
#triangle = rep(i, nPosLoop + nNegLoop)
nObsCond = j
obsTrial = cbind(obsTrial, nObsCond,trueRect)
obsTrial = rbind(allObs[allObs[,"nObsCond"] == j-1,], obsTrial)
obsTrial[,"nObsCond"] = j
allObs = rbind(allObs, obsTrial)
}
}
return(as.matrix(allObs))
}
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
View(obs)
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
View(obs)
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
# simulate multiple trials of responses
debugonce(simulate_MultiTrials)
partTrust = cbind(simulate_MultiTrials(obs, alpha = 1), alpha = 1)
partDecept = cbind(simulate_MultiTrials(obs, alpha = -1), alpha = -1)
partWeak =  cbind(simulate_MultiTrials(obs, alpha = 0), alpha = 0)
# simulate multiple trials of responses
debugonce(simulate_MultiTrials)
partTrust = cbind(simulate_MultiTrials(obs, alpha = 1), alpha = 1)
partDecept = cbind(simulate_MultiTrials(obs, alpha = -1), alpha = -1)
partWeak =  cbind(simulate_MultiTrials(obs, alpha = 0), alpha = 0)
# plot
d_plot = rbind(partTrust, partWeak, partDecept)
ggplot(data = (as.data.frame(d_plot)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(alpha ~ nObsCond)
partTrust = cbind(simulate_MultiTrials(obs, alpha = 1), alpha = 1)
partDecept = cbind(simulate_MultiTrials(obs, alpha = -1), alpha = -1)
partWeak =  cbind(simulate_MultiTrials(obs, alpha = 0), alpha = 0)
# plot
d_plot = rbind(partTrust, partWeak, partDecept)
ggplot(data = (as.data.frame(d_plot)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(alpha ~ nObsCond)
grid = gridSearch_MultiTrials(obs,borders)
debugonce(fitAlpha_MultiTrials)
fitTrust = fitAlpha_MultiTrials(grid, partTrust)
fitTrust = fitAlpha_MultiTrials(grid, partTrust)
View(fitTrust)
d_alphaPlot = grid[grid[,"alpha"] == 1, ]
View(d_alphaPlot)
d_alphaPlot = rbind(grid[grid[,"alpha"] == 1, ], grid[grid[,"alpha"] == 2, ], grid[grid[,"alpha"] == 1, ])
View(d_alphaPlot)
d_alphaPlot = rbind(grid[grid[,"alpha"] == 1, ], grid[grid[,"alpha"] == 0, ], grid[grid[,"alpha"] == ,-1 ])
d_alphaPlot = rbind(grid[grid[,"alpha"] == 1, ], grid[grid[,"alpha"] == 0, ], grid[grid[,"alpha"] == -1, ])
grid[grid[,"alpha"] == 0, ]
grid[grid[,"alpha"] == 0, ][1,]
d_alphaPlot = rbind(grid[grid[,"alpha"] == 1, ], grid[grid[,"alpha"] == 0, ][1,], grid[grid[,"alpha"] == -1, ])
d_alphaPlot = rbind(grid[grid[,"alpha"] == 1, ], grid[grid[,"alpha"] == 0, ][1,], grid[grid[,"alpha"] == -1, ])
View(d_alphaPlot)
d_alphaPlot = rbind(grid[grid[,"alpha"] == 1, ], grid[grid[,"alpha"] == -1, ])
ggplot(data = (as.data.frame(d_alphaPlot)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
facet_grid(alpha ~ nObsCond)
View(d_alphaPlot)
ggplot(data = (as.data.frame(d_alphaPlot)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0.2)+
facet_grid(alpha ~ nObsCond)
ggplot(data = (as.data.frame(d_alphaPlot)))+
geom_point(data = as.data.frame(obs), aes(as.numeric(x),as.numeric(y)))+
geom_rect(aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", alpha = 0)+
geom_rect(data = d_plot, aes(xmin = x1, xmax = x2, ymin = y1, ymax = y2),colour = "black", fill = "red", alpha = 0.3)+
facet_grid(alpha ~ nObsCond)
# generate true rectangles
rect1 = genTrueRects(1, borders)
# generate observations
obs = generateObs(c(1,2,3), c(0,1,2), as.vector(rect1))
